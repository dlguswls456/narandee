package com.gotcha.narandee.src.result

import android.annotation.SuppressLint
import android.content.Context
import android.content.Intent
import android.location.Location
import android.net.Uri
import android.os.Bundle
import android.util.Log
import android.view.View
import androidx.fragment.app.activityViewModels
import androidx.lifecycle.lifecycleScope
import androidx.lifecycle.withCreated
import androidx.recyclerview.widget.LinearLayoutManager
import androidx.recyclerview.widget.RecyclerView
import com.google.gson.Gson
import com.google.gson.reflect.TypeToken
import com.gotcha.narandee.R
import com.gotcha.narandee.config.ApplicationClass
import com.gotcha.narandee.config.ApplicationClass.Companion.FRAGMENT_CLOTHES
import com.gotcha.narandee.config.ApplicationClass.Companion.FRAGMENT_CUSTOM
import com.gotcha.narandee.config.ApplicationClass.Companion.FRAGMENT_FOOD
import com.gotcha.narandee.config.ApplicationClass.Companion.FRAGMENT_PLACE
import com.gotcha.narandee.config.ApplicationClass.Companion.USER_AGE
import com.gotcha.narandee.config.ApplicationClass.Companion.USER_GENDER
import com.gotcha.narandee.config.ApplicationClass.Companion.sharedPreferences
import com.gotcha.narandee.config.BaseFragment
import com.gotcha.narandee.databinding.FragmentResultBinding
import com.gotcha.narandee.src.clothes.ClothesAnswer
import com.gotcha.narandee.src.clothes.WeatherResponse
import com.gotcha.narandee.src.food.FoodAnswer
import com.gotcha.narandee.src.main.MainActivity
import com.gotcha.narandee.src.main.MainViewModel
import com.gotcha.narandee.src.models.ChatGptRequest
import com.gotcha.narandee.src.models.ChatMessage
import com.gotcha.narandee.src.models.Message
import com.gotcha.narandee.src.place.PlaceAnswer
import com.gotcha.narandee.src.service.GptApi
import com.gotcha.narandee.src.service.WeatherApi
import com.gotcha.narandee.util.popBackStack
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.delay
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import okhttp3.internal.notify
import kotlin.math.log

private const val TAG = "ResultFragment_Ïã∏Ìîº"

class ResultFragment :
    BaseFragment<FragmentResultBinding>(
        FragmentResultBinding::bind,
        R.layout.fragment_result
    ) {

    private val mainActivityViewModel: MainViewModel by activityViewModels()

    private var resultType = 0
    private lateinit var nickname: String
    private lateinit var age: String
    private lateinit var gender: String

    private lateinit var foodType: String
    private lateinit var foodTime: String

    private lateinit var placeType: String
    private lateinit var placeDetail: String
    private lateinit var placeWith: String

    private lateinit var clothesType: String
    private lateinit var clothesLocation: Location
    private lateinit var clothesAddress: String
    private lateinit var clothesWeather: WeatherResponse
    private lateinit var clothesWeatherKorean: String
    private var clothesTemperature = 0

    private lateinit var mainActivity: MainActivity
    private lateinit var gptScript: String

    private var isFirstGPTAnswer = true
    private var recentAnswer = arrayListOf<String>() // Ïù¥Ï†ÑÏóê Ï∂îÏ≤úÌñàÎçò Í≤ÉÎì§

    private lateinit var chatAdapter: ChatListAdapter
    private var messageList: MutableList<ChatMessage> = arrayListOf()

    private lateinit var customAnswer: String

    override fun onAttach(context: Context) {
        super.onAttach(context)
        mainActivity = activity as MainActivity
    }

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)

        nickname = mainActivityViewModel.userName.value.toString()
        resultType = mainActivityViewModel.resultType

        getUserInfo()

        when (resultType) {
            FRAGMENT_FOOD -> {
                gptScript = "ÎãòÏùò Ï∑®Ìñ•Ïóê ÎßûÎäî Î©îÎâ¥Î•º Ï∂îÏ≤úÌï¥ ÎìúÎ¶¥Í≤åÏöî üòÜ"
                getFoodData()
            }

            FRAGMENT_PLACE -> {
                gptScript = "ÎãòÏóêÍ≤å ÏïåÎßûÎäî Ïû•ÏÜåÎ•º Ï∂îÏ≤úÌï¥ ÎìúÎ¶¥Í≤åÏöî üòö"
                getPlaceData()
            }

            FRAGMENT_CLOTHES -> {
                getClothesData()
            }
        }
    }

    override fun onDestroyView() {
        super.onDestroyView()
        chatAdapter.clearTypingHandlerCallbacks()
    }

    private fun getClothesData() {
        clothesType = mainActivityViewModel.userCurrentClothesPreference
        clothesLocation = mainActivityViewModel.userLocation.value!!
        clothesAddress = mainActivityViewModel.userAddress.value!!

        // ÏûÖÍ≥† Ïã∂ÏùÄ Ïä§ÌÉÄÏùºÏù¥ "ÏïÑÎá®, Îî∞Î°ú ÏóÜÏñ¥Ïöî"ÎùºÎ©¥ Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê Í≤É Í∞ÄÏ†∏ Ïò§Í∏∞
        if (clothesType == "ÏïÑÎá®, Îî∞Î°ú ÏóÜÏñ¥Ïöî") {
            clothesType = mainActivityViewModel.userFashionList.value.toString()
        }
    }

    private suspend fun getWeather(): WeatherResponse {
        return WeatherApi.weatherService.getWeather(
            clothesLocation.latitude.toString(),
            clothesLocation.longitude.toString(),
            ApplicationClass.WEATHER_API_KEY
        )
    }

    private fun getFoodData() {
        foodType = mainActivityViewModel.userCurrentFoodPreference
        foodTime = mainActivityViewModel.userCurrentTimePreference

        // Î®πÍ≥† Ïã∂ÏùÄ ÏùåÏãù Ï¢ÖÎ•òÍ∞Ä "ÏïÑÎá®, Îî∞Î°ú ÏóÜÏñ¥Ïöî"ÎùºÎ©¥ Í∏∞Ï°¥ ÏÇ¨Ïö©Ïûê Í≤É Í∞ÄÏ†∏ Ïò§Í∏∞
        if (foodType == "ÏïÑÎá®, Îî∞Î°ú ÏóÜÏñ¥Ïöî") {
            foodType = mainActivityViewModel.userFoodList.value.toString()
        }
    }

    private fun getPlaceData() {
        placeType = mainActivityViewModel.userCurrentPlacePreference
        placeDetail = mainActivityViewModel.userCurrentPlaceDetailPreference
        placeWith = mainActivityViewModel.userPlaceWith

        Log.d(TAG, "getPlaceData: $placeType , $placeDetail")
    }

    @SuppressLint("SetTextI18n")
    override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
        super.onViewCreated(view, savedInstanceState)

        initAdapter()
        initView()
        initEvent()

        lifecycleScope.launch {
            when (resultType) {
                FRAGMENT_FOOD -> {
                    getFoodResult()
                }

                FRAGMENT_PLACE -> {
                    getPlaceResult()
                }

                FRAGMENT_CLOTHES -> {
                    getClothesResult()
                }
            }
        }
    }

    private fun initAdapter() {
        chatAdapter = ChatListAdapter(object : ChatListAdapter.AdapterCallback {
            override fun onNeedToScroll(position: Int) {
                binding.chatListView.smoothScrollToPosition(chatAdapter.itemCount - 1)
            }
        })

        binding.chatListView.apply {
            adapter = chatAdapter
            layoutManager = LinearLayoutManager(requireContext(), RecyclerView.VERTICAL, false)
        }
    }

    private fun initEvent() {
        if (resultType == FRAGMENT_CUSTOM) {
            binding.sendBtn.setOnClickListener {
                val ask = binding.userAnswerEt.text.toString()
                binding.userAnswerEt.setText("")

                if (ask.isNotEmpty()) {
                    customAnswer = ask
                    messageList.add(ChatMessage("user", "", "", ask))
                    chatAdapter.submitList(messageList.toMutableList())

                    lifecycleScope.launch {
                        getCustomResult()
                    }
                }
            }
        }

        binding.resultBackBtn.setOnClickListener {
            popBackStack()
        }

        binding.resultAgainTv.setOnClickListener {
            val script = "Îã§Ïãú Ï∂îÏ≤úÌï¥ ÎìúÎ¶¥Í≤åÏöî! ü•∫"
            messageList.add(ChatMessage("user", "", "", "Îã§Ïãú Ï∂îÏ≤úÌï¥ Ï§ò"))
            messageList.add(ChatMessage("gpt", "", script, ""))

            chatAdapter.submitList(messageList.toMutableList())

            val millis = script.length.toLong()

            lifecycleScope.launch {
                delay(millis)
                when (resultType) {
                    FRAGMENT_FOOD -> {
                        getFoodResult()
                    }

                    FRAGMENT_PLACE -> {
                        getPlaceResult()
                    }

                    FRAGMENT_CLOTHES -> {
                        getClothesResult()
                    }
                }
            }
        }

        binding.resultFinishTv.setOnClickListener {
            binding.resultEndTv.visibility = View.VISIBLE
            showBtn(false)
        }

        setChatClickListener()
    }

    private fun getUserInfo() {
        age = sharedPreferences.getString(USER_AGE, "")
        gender = sharedPreferences.getString(USER_GENDER, "")
    }

    @SuppressLint("SetTextI18n")
    private fun initView() {
        when (resultType) {
            FRAGMENT_FOOD -> {
                binding.inputLayout.visibility = View.GONE
                messageList.add(
                    ChatMessage(
                        "user",
                        "",
                        null,
                        "${foodTime}ÏúºÎ°ú Î®πÏùÑ ÏùåÏãù ÎÇ¥ Ï∑®Ìñ•Ïóê ÎßûÏ∂∞ÏÑú Ï∂îÏ≤úÌï¥ Ï§ò ü§§"
                    )
                )
                messageList.add(ChatMessage("gpt", "", "$nickname $gptScript", ""))
                chatAdapter.submitList(messageList)
            }

            FRAGMENT_PLACE -> {
                binding.inputLayout.visibility = View.GONE
                if (placeDetail == "") {
                    messageList.add(ChatMessage("user", "", null, "${placeType}ÏóêÏÑú Í∞ÄÎ≥ºÎßåÌïú Í≥≥ Ï∂îÏ≤úÌï¥ Ï§ò üòé"))
                } else {
                    messageList.add(
                        ChatMessage(
                            "user",
                            "",
                            null,
                            "$placeType ${placeDetail}ÏóêÏÑú Í∞ÄÎ≥ºÎßåÌïú Í≥≥ Ï∂îÏ≤úÌï¥ Ï§ò üòé"
                        )
                    )
                }
                chatAdapter.submitList(messageList)
            }

            FRAGMENT_CLOTHES -> {
                binding.inputLayout.visibility = View.GONE
                messageList.add(
                    ChatMessage(
                        "user",
                        "",
                        null,
                        "${clothesAddress}ÏóêÏÑú Ïò§Îäò ÏûÖÏùÑÎßåÌïú Ïò∑ Ï∂îÏ≤úÌï¥ Ï§ò üòÜ"
                    )
                )
                chatAdapter.submitList(messageList)
            }

            FRAGMENT_CUSTOM -> {
                binding.inputLayout.visibility = View.VISIBLE
            }

        }

    }

    @SuppressLint("SetTextI18n")
    private suspend fun getFoodResult() {
        val jsonString = """
    {
      "foods": [
        {
          "name": "__",
          "reason": "__"
        }
      ]
    }
    """.trimIndent()

        val request = ChatGptRequest(
            model = "gpt-4o",
            messages = listOf(
                Message(
                    role = "system",
                    content = "ÎãπÏã†ÏùÄ Î¨¥ÏóáÏùÑ Î®πÏùÑÏßÄ Í≥†ÎØºÌïòÍ≥† ÏûàÎäî ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏµúÏã† Ìä∏Î†åÎìúÎ•º Î∞òÏòÅÌï¥ Î©îÎâ¥Î•º Ï∂îÏ≤úÌï¥ Ï£ºÎäî ÏàôÎ†®Îêú ÏöîÎ¶¨ Ï∂îÏ≤ú Ï†ÑÎ¨∏Í∞ÄÎ°ú, " +
                            "ÌïúÍµ≠ÏóêÏÑú Ïú†ÌñâÌïòÎäî ÏùåÏãùÍ≥º ÌïúÍµ≠Ïù∏Ïùò ÏûÖÎßõÏùÑ Ïûò ÏïåÍ≥† ÏûàÏúºÎ©∞ ÏπúÏ†àÌïòÍ≤å ÏùåÏãùÏùÑ Ï∂îÏ≤úÌï¥ Ï£ºÍ≥† ÏÜåÍ∞úÌï¥ Ï§çÎãàÎã§."
                ),
                Message(
                    role = "user", content = "$jsonString Î¨¥Ï°∞Í±¥ Ïù¥ ÌòïÏãùÏùÑ ÏÇ¨Ïö©Ìï¥. Ïïà ÌïòÎ©¥ Ïò§Î•òÍ∞Ä ÎÇò." +
                            "${age}Ïùò ÌïúÍµ≠Ïù∏ ${gender}Ïù¥ Ï¢ãÏïÑÌï† ÎßåÌïú Í≤ÉÏúºÎ°ú " +
                            "$foodTime ÏãùÏÇ¨Ïóê ÏïåÎßûÎäî ÏûêÏÑ∏Ìïú ÏùåÏãù Ïù¥Î¶Ñ (ÏòàÎ•º Îì§Î©¥ ÌååÏä§ÌÉÄ ÎßêÍ≥† ÌÅ¨Î¶º ÌååÏä§ÌÉÄ)Í≥º Ï∂îÏ≤ú Ïù¥Ïú†Î•º 100Ïûê Ïù¥ÎÇ¥Î°ú ÏöîÏïΩÌï¥ÏÑú " +
                            "$foodType Ï¢ÖÎ•òÎ°ú ÏùåÏãù ÏÑ∏ Í∞ÄÏßÄÎßå $recentAnswer Ï†úÏô∏ÌïòÍ≥† " +
                            "ÌïúÍµ≠Ïñ¥Î°ú Ï°¥ÎåìÎßêÏùÑ ÏÇ¨Ïö©ÌïòÍ≥† Ïñ¥Ïö∏Î¶¨Îäî Ïù¥Î™®ÏßÄÎ•º ÏÇ¨Ïö©Ìï¥ÏÑú ÎßêÌï¥ Ï§ò " +
                            "scriptÎäî ÎÇ¥Í∞Ä ÏßàÎ¨∏Ìïú Í≤É Í∑∏ÎåÄÎ°ú Î≥¥ÎÇ¥Î©¥ Îèº" +
                            "jsonÎßå string ÌòïÌÉúÎ°ú ``` ÏóÜÏù¥ Î∞òÌôòÌï¥ Ï£ºÎ©¥ Îèº."
                )
            )
        )

        lifecycleScope.launch {
            try {
                showLoadingDialog()

                val chatResponse = withContext(Dispatchers.IO) {
                    val response = GptApi.chatGptService.getChatResponse(request)
                    response.choices.firstOrNull()?.message?.content
                }
                val gson = Gson() // Gson Ïù∏Ïä§ÌÑ¥Ïä§
                val listType = object : TypeToken<FoodAnswer>() {}.type
                val gptAnswer: FoodAnswer = gson.fromJson(chatResponse, listType)

                val newList = messageList.toMutableList()
                val foodList = gptAnswer.foods

                dismissLoadingDialog() // ÏùëÎãµ ÌõÑ dialog Îã´Í∏∞

                for (food in foodList) {
                    val chatMessage = ChatMessage(
                        "gpt",
                        food.name,
                        food.getGptScript(),
                        ""
                    )
                    newList.add(chatMessage)
                    recentAnswer.add(food.name)
                    chatAdapter.submitList(newList)

                    // Î∞òÎ≥µÎ¨∏Ïóê ÏßÄÏó∞ÏùÑ Ï£ºÍ∏∞ ÏúÑÌï® (ÏàúÏ∞®Ï†ÅÏúºÎ°ú ÌÉÄÏù¥Ìïë Ìö®Í≥ºÎ•º Ï£ºÍ∏∞ ÏúÑÌï¥ÏÑú)
                    val millis = 50 * (food.name.length + food.reason.length).toLong()
                    delay(millis)

                    messageList = newList.toMutableList()
                }
                Log.d(TAG, "getFoodResult: $messageList ")
                showBtn(true)
            } catch (e: Exception) {
                showToast("Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî! Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî \uD83D\uDE25")
                dismissLoadingDialog()
                e.printStackTrace()
            }
        }
    }

    @SuppressLint("SetTextI18n")
    private suspend fun getPlaceResult() {
        val jsonString = """
    {
      "places": [
        {
          "name": "__",
          "address": "__",
          "reason": "__",
          "todo": "__"
        }
      ]
    }
    """.trimIndent()

        val request = ChatGptRequest(
            model = "gpt-4o",
            messages = listOf(
                Message(
                    role = "system",
                    content = "ÎãπÏã†ÏùÄ Ïó¨ÌñâÏùÑ Í∞ÄÏÑú Ïñ¥ÎîîÎ•º Í∞àÏßÄ Í≥†ÎØºÌïòÍ≥† ÏûàÎäî ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏµúÏã† Ìä∏Î†åÎìúÎ•º Î∞òÏòÅÌï¥ ÎÜÄÎü¨Í∞à Ïû•ÏÜåÎì§ÏùÑ Ï∂îÏ≤úÌï¥ Ï£ºÎäî" +
                            " Í∞ÄÏù¥ÎìúÎ°ú, ÌïúÍµ≠ÏóêÏÑú Ïú†ÌñâÌïòÎäî ÎÜÄÍ±∞Î¶¨Î•º Ïûò ÏïåÍ≥† ÏûàÏúºÎ©∞ ÏπúÏ†àÌïòÍ≤å ÎÜÄÍ±∞Î¶¨Î•º Ï∂îÏ≤úÌï¥ Ï£ºÍ≥† ÏÜåÍ∞úÌï¥ Ï§çÎãàÎã§."
                ),
                Message(
                    role = "user",
                    content = "Î¨¥Ï°∞Í±¥ $jsonString Ïù¥ ÌòïÏãù(Ïû•ÏÜå Ïù¥Î¶Ñ, Ï£ºÏÜå, Ï∂îÏ≤ú Ïù¥Ïú†, Í∑∏ Ïû•ÏÜåÏóêÏÑú Ìï† Ïàò ÏûàÎäî Í≤ÉÎì§)ÏùÑ ÏÇ¨Ïö©Ìï¥ÏÑú" +
                            "${age}Ïùò ÌïúÍµ≠Ïù∏ ${gender}Ïù¥ Ï¢ãÏïÑÌï† ÎßåÌïú Í≤ÉÏúºÎ°ú " +
                            "${placeWith}Í≥º Ìï®Íªò Ïó¨ÌñâÏùÑ Í∞ÄÎäîÎç∞ $placeType $placeDetail ÏóêÏÑú ÎÜÄÍ±∞Î¶¨ÏôÄ Ï∂îÏ≤ú Ïù¥Ïú†Î•º 100Ïûê Ïù¥ÎÇ¥Î°ú ÏöîÏïΩÌï¥ÏÑú $recentAnswer Ï†úÏô∏ÌïòÍ≥† ÏÑ∏ Í∞ÄÏßÄÎ•º " +
                            " ÌïúÍµ≠Ïñ¥Î°ú Ï°¥ÎåìÎßêÍ≥º ÏïàÎìúÎ°úÏù¥ÎìúÏóê Ìò∏ÌôòÎêòÎäî Ï†ÅÎãπÌïú Ïù¥Î™®ÏßÄÎ•º ÏÇ¨Ïö©ÌïòÎ©¥ÏÑú Ï∂îÏ≤úÌï¥ Ï§ò. Ïù¥Ïú†Î•º ÎßêÌï† ÎïåÎäî ~ÌïòÍ∏∞ ÎïåÎ¨∏Ïóê Ï∂îÏ≤úÎìúÎ†§Ïöî, todoÎäî Ìï¥ÏãúÌÉúÍ∑∏Ï≤òÎüº ÌÇ§ÏõåÎìú ÏïûÏóê #ÏùÑ Î∂ôÏó¨ÏÑú Ï∂îÏ≤úÌï¥ Ï§ò. " +
                            "ÏµúÎåÄÌïú Ï§ëÎ≥µÎêòÏßÄ ÏïäÍ≥† Ìä∏Î†åÎîîÌïòÍ≥† ÌäπÎ≥ÑÌïú Í≥≥ÏùÑ Ï∂îÏ≤úÌï¥ Ï§ò " +
                            "jsonÎßå string ÌòïÌÉúÎ°ú ``` ÏóÜÏù¥ Î∞òÌôòÌï¥ Ï£ºÎ©¥ Îèº."
                )
            )
        )

        lifecycleScope.launch {
            try {
                showLoadingDialog()

                val chatResponse = withContext(Dispatchers.IO) {
                    val response = GptApi.chatGptService.getChatResponse(request)
                    response.choices.firstOrNull()?.message?.content
                }
                val gson = Gson() // Gson Ïù∏Ïä§ÌÑ¥Ïä§
                val listType = object : TypeToken<PlaceAnswer>() {}.type
                val gptAnswer: PlaceAnswer = gson.fromJson(chatResponse, listType)

                val newList = messageList.toMutableList()
                val placeList = gptAnswer.places

                dismissLoadingDialog() // ÏùëÎãµ ÌõÑ dialog Îã´Í∏∞

                for (place in placeList) {
                    val chatMessage = ChatMessage(
                        type = "gpt",
                        name = place.name,
                        gptScript = place.getGptScript(),
                        userScript = "",
                        placeAddress = place.address
                    )
                    newList.add(chatMessage)
                    recentAnswer.add(place.name)
                    chatAdapter.submitList(newList)

                    // Î∞òÎ≥µÎ¨∏Ïóê ÏßÄÏó∞ÏùÑ Ï£ºÍ∏∞ ÏúÑÌï® (ÏàúÏ∞®Ï†ÅÏúºÎ°ú ÌÉÄÏù¥Ìïë Ìö®Í≥ºÎ•º Ï£ºÍ∏∞ ÏúÑÌï¥ÏÑú)
                    val millis = 50 * (place.name.length + place.getGptScript().length).toLong()
                    delay(millis)

                    messageList = newList.toMutableList()
                }
                showBtn(true)
            } catch (e: Exception) {
                showToast("Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî! Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî \uD83D\uDE25")
                dismissLoadingDialog()
                e.printStackTrace()
            }
        }
    }

    @SuppressLint("SetTextI18n", "NotifyDataSetChanged")
    private suspend fun getClothesResult() {
        val jsonString = """
    {
      "clothes": [
        {
          "name": "__",
          "reason": "__"
        }
      ]
    }
    """.trimIndent()

        lifecycleScope.launch {
            try {
                if (isFirstGPTAnswer) {
                    isFirstGPTAnswer = false

                    clothesWeather = withContext(Dispatchers.IO) {
                        getWeather()
                    }

                    clothesWeatherKorean = weatherDescKo[clothesWeather.weather[0].id]!!
                    clothesTemperature = (clothesWeather.main.temp - 273.15).toInt()
                    Log.d(TAG, "getClothesResult: $clothesTemperature & $clothesWeatherKorean")

                    // Í∏∞Ïò® Ìè¨Ìï®Îêú Ïä§ÌÅ¨Î¶ΩÌä∏
                    gptScript = "ÎãòÏùò Ï∑®Ìñ•Í≥º ÌòÑÏû¨ Í∏∞Ïò®Ïóê ÎßûÎäî Ïä§ÌÉÄÏùºÏùÑ Ï∂îÏ≤úÌï¥ ÎìúÎ¶¥Í≤åÏöî! \n\n" +
                            "ÌòÑÏû¨ ${clothesAddress}Ïùò Í∏∞Ïò®ÏùÄ ${clothesTemperature}ÎèÑ Ïù¥Í≥† ${clothesWeatherKorean}ÏûÖÎãàÎã§ üòÉ"

                    messageList.add(ChatMessage("gpt", "", "$nickname $gptScript", ""))

                    chatAdapter.submitList(messageList.toList())
                    chatAdapter.notifyDataSetChanged()
                    delay(50 * (nickname.length + gptScript.length).toLong())
                }

                showLoadingDialog()

                val request = ChatGptRequest(
                    model = "gpt-4o",
                    messages = listOf(
                        Message(
                            role = "system",
                            content = "ÎãπÏã†ÏùÄ ÌäπÏ†ï ÏßÄÏó≠ÏúºÎ°ú Ïô∏Ï∂úÌïòÎäî ÏÇ¨Ïö©ÏûêÏóêÍ≤å ÏµúÏã† Ìä∏Î†åÎìúÏôÄ Ìï¥Îãπ ÏßÄÏó≠Ïùò Í∏∞Ïò®ÏùÑ Î∞òÏòÅÌï¥ Ïò∑Í≥º Ïä§ÌÉÄÏùºÏùÑ Ï∂îÏ≤úÌï¥ Ï£ºÎäî" +
                                    " ÏàôÎ†®Îêú Ìå®ÏÖò Í∞ÄÏù¥ÎìúÎ°ú, ÌïúÍµ≠ÏóêÏÑú Ïú†ÌñâÌïòÎäî Ìå®ÏÖòÏùÑ Ïûò ÏïåÍ≥† ÏûàÏúºÎ©∞ ÏπúÏ†àÌïòÍ≤å Ïò∑ÏùÑ Ï∂îÏ≤úÌï¥ Ï£ºÍ≥† ÏÜåÍ∞úÌï¥ Ï§çÎãàÎã§."
                        ),
                        Message(
                            role = "user",
                            content = "Î¨¥Ï°∞Í±¥ $jsonString Ïù¥ ÌòïÏãù(Ïò∑ Ïä§ÌÉÄÏùº, Ï∂îÏ≤ú Ïù¥Ïú†)ÏùÑ ÏÇ¨Ïö©Ìï¥ÏÑú ÎåÄÎãµÌï¥ Ï§ò." +
                                    "Í∏∞Ïò®ÏùÄ ${clothesTemperature}ÎèÑÏù¥Í≥† ÎÇ†Ïî®Îäî ${clothesWeatherKorean}Ïù¥Ïïº" +
                                    "Ïù¥Îü∞ ÎÇ†Ïóê $clothesType Ïä§ÌÉÄÏùºÏùÑ Ï¢ãÏïÑÌïòÎäî ${age} ${gender}Í∞Ä ÎßòÏóê Îì§Ïñ¥Ìï† ÏÉÅÏùòÏôÄ ÌïòÏùò Ï°∞Ìï©(Î¨¥Ï°∞Í±¥ ÏÉÅÌïòÏùò Í∞ôÏù¥)Í≥º " +
                                    "Ï∂îÏ≤ú Ïù¥Ïú† ÏÑ∏ Í∞úÎ•º 100Ïûê Ïù¥ÎÇ¥Î°ú ÏöîÏïΩÌï¥ÏÑú $recentAnswer Ï†úÏô∏ÌïòÍ≥† " +
                                    "ÌïúÍµ≠Ïñ¥Î°ú Ï°¥ÎåìÎßêÍ≥º ÏïàÎìúÎ°úÏù¥ÎìúÏóê Ìò∏ÌôòÎêòÎäî Ï†ÅÎãπÌïú Ïù¥Î™®ÏßÄÎ•º ÏÇ¨Ïö©ÌïòÎ©¥ÏÑú Ï∂îÏ≤úÌï¥ Ï§ò. " +
                                    "jsonÎßå string ÌòïÌÉúÎ°ú ``` ÏóÜÏù¥ Î∞òÌôòÌï¥ Ï£ºÎ©¥ Îèº."
                        )
                    )
                )

                val chatResponse = withContext(Dispatchers.IO) {
                    val response = GptApi.chatGptService.getChatResponse(request)
                    response.choices.firstOrNull()?.message?.content
                }

                val gson = Gson() // Gson Ïù∏Ïä§ÌÑ¥Ïä§ ÏÉùÏÑ±
                val listType = object : TypeToken<ClothesAnswer>() {}.type
                val gptAnswer: ClothesAnswer = gson.fromJson(chatResponse, listType)

                val newList = messageList.toMutableList()
                val clothesList = gptAnswer.clothes

                dismissLoadingDialog() // ÏùëÎãµ ÌõÑ dialog Îã´Í∏∞

                for (clothes in clothesList) {
                    val chatMessage = ChatMessage(
                        "gpt",
                        clothes.name,
                        clothes.getGptScript(),
                        ""
                    )
                    newList.add(chatMessage)
                    recentAnswer.add(clothes.name)
                    chatAdapter.submitList(newList)

                    // Î∞òÎ≥µÎ¨∏Ïóê ÏßÄÏó∞ÏùÑ Ï£ºÍ∏∞ ÏúÑÌï® (ÏàúÏ∞®Ï†ÅÏúºÎ°ú ÌÉÄÏù¥Ìïë Ìö®Í≥ºÎ•º Ï£ºÍ∏∞ ÏúÑÌï¥ÏÑú)
                    val millis = 50 * (clothes.name.length + clothes.getGptScript().length).toLong()
                    delay(millis)

                    messageList = newList.toMutableList()
                }
                showBtn(true)
            } catch (e: Exception) {
                showToast("Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî! Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî \uD83D\uDE25")
                dismissLoadingDialog()
                e.printStackTrace()
            }
        }
    }

    @SuppressLint("SetTextI18n")
    private suspend fun getCustomResult() {
        val request = ChatGptRequest(
            model = "gpt-4o",
            messages = listOf(
                Message(
                    role = "system",
                    content = "ÎãπÏã†ÏùÄ ÏÇ¨ÎûåÎì§Ïù¥ Ïñ¥Î†§ÏõåÌïòÍ≥† ÏûàÎäî Í≤∞Ï†ïÏùÑ ÎåÄÏã† Ìï¥ Ï£ºÎäî Ïñ¥ÏãúÏä§ÌÑ¥Ìä∏ÏûÖÎãàÎã§. ÎãπÏã†ÏùÄ ÏπúÏ†àÌïòÎ©∞ Îî∞ÎúªÌï©ÎãàÎã§."
                ),
                Message(
                    role = "user",
                    content = "${customAnswer}ÏùÄ ÏÉÅÎåÄÎ∞©Ïùò ÏßàÎ¨∏Ïù¥Ïïº. ÏßàÎ¨∏Ïóê ÎåÄÌïú Î™ÖÌôïÌïú ÎåÄÎãµ(Í≤∞Ï†ï)Ïù¥ ÌïÑÏöîÌï¥." +
                            "Í∑∏Î¶¨Í≥† ÎÑ§ ÏùòÍ≤¨ÏóêÎäî 100Ïûê Ïù¥ÎÇ¥Ïùò Ïù¥Ïú†ÏôÄ Ìï®Íªò ÎßêÌï¥ Ï§ò." +
                            "ÎòêÌïú ÎåÄÎãµÏùÄ Ï°¥ÎåìÎßêÎ°ú ÏïàÎìúÎ°úÏù¥ÎìúÏóê Ìò∏ÌôòÎêòÎäî Ï†ÅÎãπÌïú Ïù¥Î™®ÏßÄÎ•º ÏÇ¨Ïö©ÌïòÎ©¥ÏÑú Ìï¥ Ï§¨ÏúºÎ©¥ Ï¢ãÍ≤†Ïñ¥."
                )
            )
        )

        lifecycleScope.launch {
            try {
                showLoadingDialog()

                val chatResponse = withContext(Dispatchers.IO) {
                    val response = GptApi.chatGptService.getChatResponse(request)
                    response.choices.firstOrNull()?.message?.content
                }

                val newList = messageList.toMutableList()

                dismissLoadingDialog() // ÏùëÎãµ ÌõÑ dialog Îã´Í∏∞

                newList.add(ChatMessage("gpt", "", chatResponse, ""))
                chatAdapter.submitList(newList)

                // Î∞òÎ≥µÎ¨∏Ïóê ÏßÄÏó∞ÏùÑ Ï£ºÍ∏∞ ÏúÑÌï® (ÏàúÏ∞®Ï†ÅÏúºÎ°ú ÌÉÄÏù¥Ìïë Ìö®Í≥ºÎ•º Ï£ºÍ∏∞ ÏúÑÌï¥ÏÑú)
                val millis = 50 * (chatResponse?.length?.toLong() ?: 0)
                delay(millis)

                messageList = newList.toMutableList()
            } catch (e: Exception) {
                showToast("Ïò§Î•òÍ∞Ä Î∞úÏÉùÌñàÏñ¥Ïöî! Îã§Ïãú ÏãúÎèÑÌï¥ Ï£ºÏÑ∏Ïöî \uD83D\uDE25")
                dismissLoadingDialog()
                e.printStackTrace()
            }
        }
    }

    private fun setChatClickListener() {
        val chatClickListener: ChatListAdapter.ChatClickListener
        if (resultType == FRAGMENT_PLACE) {
            chatClickListener = object : ChatListAdapter.ChatClickListener {
                override fun onClick(address: String?) {
                    if (address != "") {
                        val destinationUri = Uri.parse("geo:0,0?q=$address")
                        val mapIntent = Intent(Intent.ACTION_VIEW, destinationUri)

                        val packageManager = mainActivity.packageManager
                        val activities = packageManager.queryIntentActivities(mapIntent, 0)

                        if (activities.size > 0) {
                            startActivity(mapIntent)
                        }
                    }

                }
            }
        } else {
            chatClickListener = object : ChatListAdapter.ChatClickListener {
                override fun onClick(address: String?) {

                }
            }
        }
        chatAdapter.setChatClickListener(chatClickListener)
    }

    private fun showBtn(isShow: Boolean) {
        if (isShow) {
            binding.resultBtnLl.visibility = View.VISIBLE
        } else {
            binding.resultBtnLl.visibility = View.INVISIBLE
        }
    }

    private val weatherDescKo = mapOf(
        201 to "Í∞ÄÎ≤ºÏö¥ ÎπÑÎ•º ÎèôÎ∞òÌïú Ï≤úÎë•Íµ¨Î¶Ñ",
        200 to "ÎπÑÎ•º ÎèôÎ∞òÌïú Ï≤úÎë•Íµ¨Î¶Ñ",
        202 to "Ìè≠Ïö∞Î•º ÎèôÎ∞òÌïú Ï≤úÎë•Íµ¨Î¶Ñ",
        210 to "ÏïΩÌïú Ï≤úÎë•Íµ¨Î¶Ñ",
        211 to "Ï≤úÎë•Íµ¨Î¶Ñ",
        212 to "Í∞ïÌïú Ï≤úÎë•Íµ¨Î¶Ñ",
        221 to "Î∂àÍ∑úÏπôÏ†Å Ï≤úÎë•Íµ¨Î¶Ñ",
        230 to "ÏïΩÌïú Ïó∞Î¨¥Î•º ÎèôÎ∞òÌïú Ï≤úÎë•Íµ¨Î¶Ñ",
        231 to "Ïó∞Î¨¥Î•º ÎèôÎ∞òÌïú Ï≤úÎë•Íµ¨Î¶Ñ",
        232 to "Í∞ïÌïú ÏïàÍ∞úÎπÑÎ•º ÎèôÎ∞òÌïú Ï≤úÎë•Íµ¨Î¶Ñ",
        300 to "Í∞ÄÎ≤ºÏö¥ ÏïàÍ∞úÎπÑ",
        301 to "ÏïàÍ∞úÎπÑ",
        302 to "Í∞ïÌïú ÏïàÍ∞úÎπÑ",
        310 to "Í∞ÄÎ≤ºÏö¥ Ï†ÅÏùÄÎπÑ",
        311 to "Ï†ÅÏùÄÎπÑ",
        312 to "Í∞ïÌïú Ï†ÅÏùÄÎπÑ",
        313 to "ÏÜåÎÇòÍ∏∞ÏôÄ ÏïàÍ∞úÎπÑ",
        314 to "Í∞ïÌïú ÏÜåÎÇòÍ∏∞ÏôÄ ÏïàÍ∞úÎπÑ",
        321 to "ÏÜåÎÇòÍ∏∞",
        500 to "ÏïÖÌïú ÎπÑ",
        501 to "Ï§ëÍ∞Ñ ÎπÑ",
        502 to "Í∞ïÌïú ÎπÑ",
        503 to "Îß§Ïö∞ Í∞ïÌïú ÎπÑ",
        504 to "Í∑πÏã¨Ìïú ÎπÑ",
        511 to "Ïö∞Î∞ï",
        520 to "ÏïΩÌïú ÏÜåÎÇòÍ∏∞ ÎπÑ",
        521 to "ÏÜåÎÇòÍ∏∞ ÎπÑ",
        522 to "Í∞ïÌïú ÏÜåÎÇòÍ∏∞ ÎπÑ",
        531 to "Î∂àÍ∑úÏπôÏ†Å ÏÜåÎÇòÍ∏∞ ÎπÑ",
        600 to "Í∞ÄÎ≤ºÏö¥ Îàà",
        601 to "Îàà",
        602 to "Í∞ïÌïú Îàà",
        611 to "ÏßÑÎààÍπ®ÎπÑ",
        612 to "ÏÜåÎÇòÍ∏∞ ÏßÑÎààÍπ®ÎπÑ",
        615 to "ÏïΩÌïú ÎπÑÏôÄ Îàà",
        616 to "ÎπÑÏôÄ Îàà",
        620 to "ÏïΩÌïú ÏÜåÎÇòÍ∏∞ Îàà",
        621 to "ÏÜåÎÇòÍ∏∞ Îàà",
        622 to "Í∞ïÌïú ÏÜåÎÇòÍ∏∞ Îàà",
        701 to "Î∞ïÎ¨¥",
        711 to "Ïó∞Í∏∞",
        721 to "Ïó∞Î¨¥",
        731 to "Î™®Îûò Î®ºÏßÄ",
        741 to "ÏïàÍ∞ú",
        751 to "Î™®Îûò",
        761 to "Î®ºÏßÄ",
        762 to "ÌôîÏÇ∞Ïû¨",
        771 to "ÎèåÌíç",
        781 to "ÌÜ†ÎÑ§Ïù¥ÎèÑ",
        800 to "Íµ¨Î¶Ñ Ìïú Ï†ê ÏóÜÎäî ÎßëÏùÄ ÌïòÎäò",
        801 to "ÏïΩÍ∞ÑÏùò Íµ¨Î¶ÑÏù¥ ÎÇÄ ÌïòÎäò",
        802 to "ÎìúÎ¨∏ÎìúÎ¨∏ Íµ¨Î¶ÑÏù¥ ÎÇÄ ÌïòÎäò",
        803 to "Íµ¨Î¶ÑÏù¥ Í±∞Ïùò ÏóÜÎäî ÌïòÎäò",
        804 to "Íµ¨Î¶ÑÏúºÎ°ú Îí§ÎçÆÏù∏ ÌùêÎ¶∞ ÌïòÎäò",
        900 to "ÌÜ†ÎÑ§Ïù¥ÎèÑ",
        901 to "ÌÉúÌíç",
        902 to "ÌóàÎ¶¨ÏºÄÏù∏",
        903 to "ÌïúÎû≠",
        904 to "Í≥†Ïò®",
        905 to "Î∞îÎûåÎ∂ÄÎäî",
        906 to "Ïö∞Î∞ï",
        951 to "Î∞îÎûåÏù¥ Í±∞Ïùò ÏóÜÎäî",
        952 to "ÏïΩÌïú Î∞îÎûå",
        953 to "Î∂ÄÎìúÎü¨Ïö¥ Î∞îÎûå",
        954 to "Ï§ëÍ∞Ñ ÏÑ∏Í∏∞ Î∞îÎûå",
        955 to "Ïã†ÏÑ†Ìïú Î∞îÎûå",
        956 to "ÏÑº Î∞îÎûå",
        957 to "ÎèåÌíçÏóê Í∞ÄÍπåÏö¥ ÏÑº Î∞îÎûå",
        958 to "ÎèåÌíç",
        959 to "Ïã¨Í∞ÅÌïú ÎèåÌíç",
        960 to "Ìè≠Ìíç",
        961 to "Í∞ïÌïú Ìè≠Ìíç",
        962 to "ÌóàÎ¶¨ÏºÄÏù∏"
    )


}